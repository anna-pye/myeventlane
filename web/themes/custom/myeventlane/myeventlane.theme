<?php

/**
 * @file
 * Theme functions for the MyEventLane theme.
 */

/**
 * Implements hook_theme().
 */
function myeventlane_theme($existing, $type, $theme, $path) {
  return [];
}

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function myeventlane_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  if (!empty($variables['node']) && $variables['node'] instanceof \Drupal\node\NodeInterface) {
    if ($variables['node']->id() === 25) {
      $suggestions[] = 'page__node__25';
    }
  }
}


/**
 * Implements hook_preprocess_html().
 */
function myeventlane_preprocess_html(array &$variables) {
  // Add a body class if the front page is being viewed.
  if (\Drupal::service('path.matcher')->isFrontPage()) {
    $variables['attributes']['class'][] = 'is-front';
  }
}

/**
 * Implements hook_preprocess_page().
 */
function myeventlane_preprocess_page(array &$variables) {
  // Example: Add a custom variable to use in page templates.
  $variables['my_custom_message'] = t('Welcome to MyEventLane');
}

/**
 * Implements hook_preprocess_node().
 */
function myeventlane_preprocess_node(array &$variables) {
  // Add a field value as a template variable, e.g., promoted badge logic.
  if ($variables['node']->hasField('promoted') && !$variables['node']->get('promoted')->isEmpty()) {
    $variables['is_promoted'] = $variables['node']->get('promoted')->value;
  }
}




/**
 * Implements hook_preprocess_views_view_fields().
 */
function myeventlane_preprocess_views_view_fields(&$variables) {
  // Optional: Add taxonomy slug class to view output.
  if (!empty($variables['view']->id()) && $variables['view']->id() === 'taxonomy_category_filter_buttons') {
    $name_field = $variables['fields']['name']->content;
    $slug = \Drupal\Component\Utility\Html::getClass(strip_tags($name_field));
    $variables['attributes']['class'][] = 'button';
    $variables['attributes']['class'][] = 'button--' . $slug;
  }
}
